CCS PCH C Compiler, Version 5.007, 61971               09-ago-24 11:08

               Filename:   C:\Users\Thiago\Documents\CCS C Projects\Teclado\Teclado\teclado_matricial.lst

               ROM used:   516 bytes (2%)
                           Largest free fragment is 32252
               RAM used:   19 (1%) at main() level
                           20 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0132
.................... #define vermelho pin_d2 
.................... #define amarelo pin_d0 
.................... #define verde pin_d1 
.................... #include<18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #use delay (clock=20000000)         
*
00DA:  CLRF   FEA
00DC:  MOVLW  13
00DE:  MOVWF  FE9
00E0:  MOVF   FEF,W
00E2:  BZ    00FE
00E4:  MOVLW  06
00E6:  MOVWF  01
00E8:  CLRF   00
00EA:  DECFSZ 00,F
00EC:  BRA    00EA
00EE:  DECFSZ 01,F
00F0:  BRA    00E8
00F2:  MOVLW  7B
00F4:  MOVWF  00
00F6:  DECFSZ 00,F
00F8:  BRA    00F6
00FA:  DECFSZ FEF,F
00FC:  BRA    00E4
00FE:  RETURN 0
.................... #fuses HS,PLL5, CPUDIV1, USBDIV 
.................... #use rs232(baud=9600, xmit = PIN_C6, rcv = PIN_C7) 
.................... #include "12Keys.c" 
.................... //Definições da matriz do teclado 
.................... #define COL1   pin_b3 
.................... #define COL2   pin_b2 
.................... #define COL3   pin_b1 
.................... #define COL4   pin_b0 
.................... #define LIN1   pin_b7 
.................... #define LIN2   pin_b6 
.................... #define LIN3   pin_b5 
.................... #define LIN4   pin_b4 
....................  
.................... char tecla; 
.................... boolean tecla_pres; 
....................  
.................... char varre_teclas(void) 
*
0004:  MOVLW  20
0006:  MOVWF  13
.................... { 
.................... char key = ' '; 
.................... output_high(COL4); 
0008:  BCF    F93.0
000A:  BSF    F8A.0
.................... output_high(COL3); 
000C:  BCF    F93.1
000E:  BSF    F8A.1
.................... output_high(COL2); 
0010:  BCF    F93.2
0012:  BSF    F8A.2
.................... output_low(COL1); //Ativa a primeira coluna 
0014:  BCF    F93.3
0016:  BCF    F8A.3
.................... if (!input(LIN1)) key = '1'; 
0018:  BSF    F93.7
001A:  BTFSC  F81.7
001C:  BRA    0022
001E:  MOVLW  31
0020:  MOVWF  13
.................... if (!input(LIN2)) key = '4'; 
0022:  BSF    F93.6
0024:  BTFSC  F81.6
0026:  BRA    002C
0028:  MOVLW  34
002A:  MOVWF  13
.................... if (!input(LIN3)) key = '7'; 
002C:  BSF    F93.5
002E:  BTFSC  F81.5
0030:  BRA    0036
0032:  MOVLW  37
0034:  MOVWF  13
.................... if (!input(LIN4)) key = '*'; 
0036:  BSF    F93.4
0038:  BTFSC  F81.4
003A:  BRA    0040
003C:  MOVLW  2A
003E:  MOVWF  13
.................... output_high(COL1); 
0040:  BCF    F93.3
0042:  BSF    F8A.3
.................... output_low(COL2); //Ativa a segunda coluna 
0044:  BCF    F93.2
0046:  BCF    F8A.2
.................... if (!input(LIN1)) key = '2'; 
0048:  BSF    F93.7
004A:  BTFSC  F81.7
004C:  BRA    0052
004E:  MOVLW  32
0050:  MOVWF  13
.................... if (!input(LIN2)) key = '5'; 
0052:  BSF    F93.6
0054:  BTFSC  F81.6
0056:  BRA    005C
0058:  MOVLW  35
005A:  MOVWF  13
.................... if (!input(LIN3)) key = '8'; 
005C:  BSF    F93.5
005E:  BTFSC  F81.5
0060:  BRA    0066
0062:  MOVLW  38
0064:  MOVWF  13
.................... if (!input(LIN4)) key = '0'; 
0066:  BSF    F93.4
0068:  BTFSC  F81.4
006A:  BRA    0070
006C:  MOVLW  30
006E:  MOVWF  13
.................... output_high(COL2); 
0070:  BCF    F93.2
0072:  BSF    F8A.2
.................... output_low(COL3); //Ativa a terceira coluna 
0074:  BCF    F93.1
0076:  BCF    F8A.1
.................... if (!input(LIN1)) key = '3'; 
0078:  BSF    F93.7
007A:  BTFSC  F81.7
007C:  BRA    0082
007E:  MOVLW  33
0080:  MOVWF  13
.................... if (!input(LIN2)) key = '6'; 
0082:  BSF    F93.6
0084:  BTFSC  F81.6
0086:  BRA    008C
0088:  MOVLW  36
008A:  MOVWF  13
.................... if (!input(LIN3)) key = '9'; 
008C:  BSF    F93.5
008E:  BTFSC  F81.5
0090:  BRA    0096
0092:  MOVLW  39
0094:  MOVWF  13
.................... if (!input(LIN4)) key = '#'; 
0096:  BSF    F93.4
0098:  BTFSC  F81.4
009A:  BRA    00A0
009C:  MOVLW  23
009E:  MOVWF  13
.................... output_high(COL3); 
00A0:  BCF    F93.1
00A2:  BSF    F8A.1
.................... output_low(COL4); 
00A4:  BCF    F93.0
00A6:  BCF    F8A.0
.................... if (!input(LIN1)) key = 'A'; 
00A8:  BSF    F93.7
00AA:  BTFSC  F81.7
00AC:  BRA    00B2
00AE:  MOVLW  41
00B0:  MOVWF  13
.................... if (!input(LIN2)) key = 'B'; 
00B2:  BSF    F93.6
00B4:  BTFSC  F81.6
00B6:  BRA    00BC
00B8:  MOVLW  42
00BA:  MOVWF  13
.................... if (!input(LIN3)) key = 'C'; 
00BC:  BSF    F93.5
00BE:  BTFSC  F81.5
00C0:  BRA    00C6
00C2:  MOVLW  43
00C4:  MOVWF  13
.................... if (!input(LIN4)) key = 'D'; 
00C6:  BSF    F93.4
00C8:  BTFSC  F81.4
00CA:  BRA    00D0
00CC:  MOVLW  44
00CE:  MOVWF  13
.................... output_high(COL4); 
00D0:  BCF    F93.0
00D2:  BSF    F8A.0
....................  
.................... return(key); 
00D4:  MOVFF  13,01
00D8:  RETURN 0
.................... } 
....................  
.................... char trata_teclas(void) 
.................... { 
.................... int t; 
....................  
.................... t=varre_teclas();  //Verifica se há uma tecla pressionada 
*
0100:  RCALL  0004
0102:  MOVFF  01,12
.................... if((t != ' ') && (!tecla_pres)) //Se há tecla pressionada e o flag está apagado 
0106:  MOVF   12,W
0108:  SUBLW  20
010A:  BZ    012C
010C:  BTFSC  05.0
010E:  BRA    012C
.................... { 
....................    tecla_pres = 1; //ativa o flag 
0110:  BSF    05.0
....................    if (t != tecla) 
0112:  MOVF   04,W
0114:  SUBWF  12,W
0116:  BZ    012C
....................     // Se a tecla atual é diferente da anterior 
....................    { 
....................       //filtra o ruído de contato 
....................       delay_ms(10); 
0118:  MOVLW  0A
011A:  MOVWF  13
011C:  RCALL  00DA
....................       // Lê novamente as teclas e verifica  
....................       // se a mesma tecla ainda está pressionada 
....................       // caso positivo, retorna a tecla 
....................       if (varre_teclas() == t) return (t); 
011E:  RCALL  0004
0120:  MOVF   12,W
0122:  SUBWF  01,W
0124:  BNZ   012C
0126:  MOVFF  12,01
012A:  BRA    012E
....................    } 
.................... } 
.................... tecla_pres = 0; // se não há tecla, retorna 0 
012C:  BCF    05.0
012E:  GOTO   017C (RETURN)
.................... } 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... boolean flag; 
.................... char *senha="70030"; 
.................... int contador = 0; 
.................... int errado = 0; 
....................  
....................  
.................... void main() 
0132:  CLRF   FF8
0134:  BCF    FD0.7
0136:  BSF    FB8.3
0138:  MOVLW  08
013A:  MOVWF  FAF
013C:  MOVLW  02
013E:  MOVWF  FB0
0140:  MOVLW  A6
0142:  MOVWF  FAC
0144:  MOVLW  90
0146:  MOVWF  FAB
0148:  CLRF   10
014A:  CLRF   11
014C:  MOVF   FC1,W
014E:  ANDLW  C0
0150:  IORLW  0F
0152:  MOVWF  FC1
0154:  MOVLW  07
0156:  MOVWF  FB4
0158:  CLRF   06
015A:  CLRF   07
015C:  MOVLW  37
015E:  MOVWF  0A
0160:  MOVLW  30
0162:  MOVWF  0B
0164:  MOVWF  0C
0166:  MOVLW  33
0168:  MOVWF  0D
016A:  MOVLW  30
016C:  MOVWF  0E
016E:  CLRF   0F
0170:  CLRF   09
0172:  MOVLW  0A
0174:  MOVWF  08
....................  { 
....................   port_b_pullups(True); 
0176:  BCF    FF1.7
....................    
....................      
....................   tecla_pres=0; 
0178:  BCF    05.0
....................     
....................   while(TRUE) 
....................               { 
....................                tecla = trata_teclas(); 
017A:  BRA    0100
017C:  MOVFF  01,04
....................                 
....................                if (tecla_pres){ 
0180:  BTFSS  05.0
0182:  BRA    01AC
....................                   printf("%c",tecla);  
0184:  MOVF   04,W
0186:  BTFSS  F9E.4
0188:  BRA    0186
018A:  MOVWF  FAD
....................                    
....................                   if(senha[contador] != tecla && contador<5){ 
018C:  CLRF   03
018E:  MOVF   10,W
0190:  ADDWF  08,W
0192:  MOVWF  FE9
0194:  MOVF   09,W
0196:  ADDWFC 03,W
0198:  MOVWF  FEA
019A:  MOVF   04,W
019C:  SUBWF  FEF,W
019E:  BZ    01AA
01A0:  MOVF   10,W
01A2:  SUBLW  04
01A4:  BNC   01AA
....................                      errado = 1; 
01A6:  MOVLW  01
01A8:  MOVWF  11
....................                   } 
....................                    
....................                    
....................                      contador++; 
01AA:  INCF   10,F
....................                    
....................                    
....................                } 
....................                 
....................                if((errado || contador>6) && tecla == '#'){ 
01AC:  MOVF   11,F
01AE:  BNZ   01B6
01B0:  MOVF   10,W
01B2:  SUBLW  06
01B4:  BC    01D6
01B6:  MOVF   04,W
01B8:  SUBLW  23
01BA:  BNZ   01D6
....................                   output_high(vermelho); 
01BC:  BCF    F95.2
01BE:  BSF    F8C.2
....................                   delay_ms(5000); 
01C0:  MOVLW  14
01C2:  MOVWF  12
01C4:  MOVLW  FA
01C6:  MOVWF  13
01C8:  RCALL  00DA
01CA:  DECFSZ 12,F
01CC:  BRA    01C4
....................                   output_low(vermelho); 
01CE:  BCF    F95.2
01D0:  BCF    F8C.2
....................                   contador = 0; 
01D2:  CLRF   10
....................                   errado = 0; 
01D4:  CLRF   11
....................                } 
....................                 
....................                if(contador == 6 && !errado && tecla == '#'){ 
01D6:  MOVF   10,W
01D8:  SUBLW  06
01DA:  BNZ   0200
01DC:  MOVF   11,F
01DE:  BNZ   0200
01E0:  MOVF   04,W
01E2:  SUBLW  23
01E4:  BNZ   0200
....................                   output_high(verde); 
01E6:  BCF    F95.1
01E8:  BSF    F8C.1
....................                   delay_ms(5000); 
01EA:  MOVLW  14
01EC:  MOVWF  12
01EE:  MOVLW  FA
01F0:  MOVWF  13
01F2:  RCALL  00DA
01F4:  DECFSZ 12,F
01F6:  BRA    01EE
....................                   output_low(verde); 
01F8:  BCF    F95.1
01FA:  BCF    F8C.1
....................                   contador = 0; 
01FC:  CLRF   10
....................                   errado = 0; 
01FE:  CLRF   11
....................                } 
0200:  BRA    017A
....................                 
....................                 
.................... } 
.................... } 
0202:  SLEEP 

Configuration Fuses:
   Word  1: CC24   PLL5 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
